module Data.Producer.Realtime exposing (Handler, Reply(..))

{-| Defines types used by Producers that can work in Realtime
by handling Websocket events.
-}

import Data.Item exposing (Item)


{-| Reply to server optionally generated by Handler function.

Payload of Reply must be properly serialized to bare String.
Data.Producer nor Websocket module do not mutate payload at all.

ReplyWithTimeout can be used for detecting whether there was
a timely server response received, so that we can detect errors
in stateful transaction. Floats are in milliseconds.

Engage/Disengage can be used to open/close connection
after initial state load on application startup.

TODO: Refactor using simple Cmd-based instruction, just as in polling Producer.
Define required APIs in Producer.Base.

-}
type Reply
    = Reply String
    | ReplyWithTimeout String Float
    | OnlyTimeout Float
    | NoReply
    | Engage
    | Disengage


{-| Function to handle payload of Websocket.MessageFrame
which Realtime Producers must provide.

Producers can have arbitrary state, and may return Reply if need be.

-}
type alias Handler state =
    state -> String -> ( List Item, state, Reply )
