module Data.ColumnItem exposing
    ( ColumnItem, Text(..), KTS, NamedEntity, Avatar(..)
    , EmbeddedBlock, AttachedFile(..), VisualMedia(..), MediaRecord, FileUrl(..)
    )

{-| ViewModel for items in columns. Involves many types :o

Message data types generated by individual sources must be converted to these types.

@docs ColumnItem, Text, KTS, NamedEntity, Avatar
@docs EmbeddedBlock, AttachedFile, VisualMedia, MediaRecord, FileUrl

-}

import Time


type alias ColumnItem =
    { id : String
    , author : Maybe NamedEntity
    , timestamp : Maybe Time.Posix
    , body : Text
    , kts : KTS
    , embeddedBlocks : List EmbeddedBlock
    , attachedFiles : List AttachedFile
    , reactions : List () -- TODO
    }


type Text
    = Plain String
    | Markdown String -- Parsed then rendered


type alias KTS =
    -- Any key-text pairs; if messages have something non-generic components,
    -- you may dump them here to tentatively show them
    List ( String, Text )


type alias NamedEntity =
    { primary : String
    , secondary : Maybe String
    , avatar : Maybe Avatar
    , url : Maybe String
    }


type Avatar
    = OcticonInfo
    | OcticonNote
    | ImageOrAbbr { src : Maybe String, name : String, isBot : Bool }


type alias EmbeddedBlock =
    { author : Maybe NamedEntity
    , body : Text
    , kts : KTS
    , thumbnail : Maybe VisualMedia
    , attachedFiles : List AttachedFile
    , origin : Maybe NamedEntity -- E.g. source service name
    }


type AttachedFile
    = VisualFile VisualMedia
    | OtherFile
        { fileUrl : FileUrl
        , description : Maybe String
        , preview : Maybe String -- If present, it is rendered in code block. Non-text previews are not supported
        }


type VisualMedia
    = Image MediaRecord
    | Video MediaRecord


type alias MediaRecord =
    { src : String
    , description : Maybe String
    , dimension : Maybe ( Int, Int )
    }


type FileUrl
    = DownloadUrl String
    | ExternalLink String
