module View.Organisms.Column.Items.ItemForView exposing
    ( ItemForView, new
    , timestamp, kts, embeddedMatters, attachedFiles
    )

{-| ViewModel for items in columns. Involves many types :o

Message data types generated by individual sources must be converted to ItemForView.
This module provides various builder functions for that purpose.

@docs ItemForView, new
@docs timestamp, kts, embeddedMatters, attachedFiles

-}

import Time
import View.Organisms.Column.Items.ItemForView.Contents exposing (..)
import View.Organisms.Column.Items.ItemForView.EmbeddedMatter exposing (EmbeddedMatter)
import View.Organisms.Column.Items.ItemForView.NamedEntity exposing (NamedEntity)


type alias ItemForView =
    -- TODO Add sourceType property in order to apply per-item style change, such as different markdown options
    { id : String
    , scrollIndex : Int
    , author : NamedEntity
    , timestamp : Maybe Time.Posix
    , body : Text
    , kts : KTS
    , embeddedMatters : List EmbeddedMatter
    , attachedFiles : List AttachedFile
    , reactions : List () -- TODO
    }


new : String -> Int -> NamedEntity -> Text -> ItemForView
new id scrollIndex author body =
    { id = id
    , scrollIndex = scrollIndex
    , author = author
    , timestamp = Nothing
    , body = body
    , kts = []
    , embeddedMatters = []
    , attachedFiles = []
    , reactions = []
    }


timestamp : Time.Posix -> ItemForView -> ItemForView
timestamp val old =
    { old | timestamp = Just val }


kts : KTS -> ItemForView -> ItemForView
kts val old =
    { old | kts = val }


embeddedMatters : List EmbeddedMatter -> ItemForView -> ItemForView
embeddedMatters val old =
    { old | embeddedMatters = val }


attachedFiles : List AttachedFile -> ItemForView -> ItemForView
attachedFiles val old =
    { old | attachedFiles = val }
